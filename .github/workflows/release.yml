name: release
on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    env:
      GITU_VERSION: ""
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      gitu_version: ${{ env.GITU_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.GITU_VERSION == ''
        run: |
          echo "GITU_VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "version is: ${{ env.GITU_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GITU_VERSION }}
          release_name: ${{ env.GITU_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: "--target ${{ matrix.target }}"
      TARGET_DIR: ./target/${{ matrix.target }}
    strategy:
      matrix:
        build: [linux, linux-arm, macos]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
        - build: linux-arm
          os: ubuntu-latest
          rust: stable
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Use Cross
      shell: bash
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV

    - name: Build release binary
      run: cross build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/gitu"

    - name: Strip release binary (arm)
      if: matrix.build == 'linux-arm'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip \
          /target/arm-unknown-linux-gnueabihf/release/gitu

    - name: Build archive
      shell: bash
      run: |
        staging="gitu-${{ needs.create-release.outputs.gitu_version }}-${{ matrix.target }}"
        mkdir -p "$staging/complete"

        cp {README.md,LICENSE} "$staging/"
        cp "target/${{ matrix.target }}/release/gitu" "$staging/"

        tar czvf "$staging.tar.gz" "$staging"
        echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
